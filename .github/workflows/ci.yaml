name: CI
on:
  workflow_dispatch:
    inputs:
      trigger:
        description: Type m to triggre manual jobs
        required: false
        default: ''
  pull_request:
    branches: [ master ]
  push:
env:
  JAVA_VERSION: 1.8
jobs:
  spring-batch-example:
    if: github.event.inputs.trigger == ''
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      id: ci
      with:
        path: |
          ~/.npm
          ~/.node
          ~/.local
          ~/.gradle
          ~/.docker
          ~/.m2/repository
          !~/.m2/repository/com/gituhb/daggerok
        key: ${{ runner.os }}-${{ hashFiles('**/*.gradle', '**/pom.xml') }}
    - uses: actions/setup-node@v2
    - uses: actions/setup-java@v1
      with:
        java-version: ${{ env.JAVA_VERSION }}
    - run: cd $GITHUB_WORKSPACE/spring-batch-example ; ./gradlew clean build bootRun
  spring-batch-pipeline-chain:
    if: github.event.inputs.trigger == ''
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      id: ci
      with:
        path: |
          ~/.npm
          ~/.node
          ~/.local
          ~/.gradle
          ~/.docker
          ~/.m2/repository
          !~/.m2/repository/com/gituhb/daggerok
        key: ${{ runner.os }}-${{ hashFiles('**/*.gradle', '**/pom.xml') }}
    - uses: actions/setup-node@v2
    - uses: actions/setup-java@v1
      with:
        java-version: ${{ env.JAVA_VERSION }}
    - run: cd $GITHUB_WORKSPACE/spring-batch-pipeline-chain ; rm -rf ~/.m2/repository/com/github/daggerok/batch ; ./mvnw -B dependency:resolve dependency:resolve-plugins
    - run: cd $GITHUB_WORKSPACE/spring-batch-pipeline-chain ; ./mvnw -f docker -Pdown ; ./mvnw -f docker -Pup
    - run: sleep 10s
    - run: cd $GITHUB_WORKSPACE/spring-batch-pipeline-chain ; ./mvnw clean install
    - run: cd $GITHUB_WORKSPACE/spring-batch-pipeline-chain ; ./mvnw -f apps/app spring-boot:run
    - run: cd $GITHUB_WORKSPACE/spring-batch-pipeline-chain ; ./mvnw -f docker -Pdown
  dependency-updates:
    if: contains(github.event.inputs.trigger, 'M')
      || startsWith(github.event.inputs.trigger, 'm')
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - run: |
        echo "Trigger: ${{ github.event.inputs.trigger }}"
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      id: ci
      with:
        path: |
          ~/.npm
          ~/.node
          ~/.local
          ~/.gradle
          ~/.docker
          ~/.m2/repository
          !~/.m2/repository/com/gituhb/daggerok
        key: ${{ runner.os }}-${{ hashFiles('**/*.gradle', '**/pom.xml') }}
    - uses: actions/setup-java@v1
      with:
        java-version: ${{ env.JAVA_VERSION }}
    - run: cd $GITHUB_WORKSPACE/spring-batch-pipeline-chain ; ./mvnw -B dependency:resolve dependency:resolve-plugins
    - run: cd $GITHUB_WORKSPACE/spring-batch-pipeline-chain ; ./mvnw versions:display-plugin-updates
    - run: cd $GITHUB_WORKSPACE/spring-batch-pipeline-chain ; ./mvnw versions:display-property-updates
    - run: cd $GITHUB_WORKSPACE/spring-batch-pipeline-chain ; ./mvnw versions:display-parent-updates
